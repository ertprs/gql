name: Continuous integration/deployment

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test
          POSTGRES_DB: gql
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v1

      - run: npm install

      - run: npm run lint

      - run: npm run test

      - name: git config
        if: github.ref == 'refs/heads/master'
        run: |
          git config --global user.name 'Leo Falco'
          git config --global user.email 'leonardo.falco@outlook.com'
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}
          git fetch --tags
          git checkout master
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Is republishing
        id: is-republishing
        if: github.ref == 'refs/heads/master'
        run: |
          ref=$(git rev-parse --symbolic-full-name HEAD)
          if [ "$ref" = "HEAD" ]
          then
            output=true
          else
            output=false
          fi
          echo $output
          echo "::set-output name=output::$output"

      - run: npx lerna version
        if: github.ref == 'refs/heads/master' && steps.is-republishing.outputs.output == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get git ref
        id: get-ref
        if: github.ref == 'refs/heads/master'
        run: |
          next_tag_commit_count=$(git describe --contains --always HEAD | cut -d'~' -f2 | cut -d'^' -f2)
          if [ "$next_tag_commit_count" = "1" ] # has an tag on next commit
          then
            # next ref is the tag on next commit
            ref=$(git describe --contains HEAD | cut -d'~' -f1 | cut -d'^' -f1)
          else
            # next ref is the current commit short abbreviation
            ref=$(git describe --always)
          fi
          echo $ref
          echo "::set-output name=ref::$ref"

      - name: checkout ref
        if: github.ref == 'refs/heads/master'
        run: git checkout ${{ steps.get-ref.outputs.ref }}

      - name: sentry release
        if: github.ref == 'refs/heads/master' && steps.is-republishing.outputs.output == 'false'
        run: |
          VERSION=$(git describe --abbrev=0 --tags)
          npx sentry-cli releases new -p gql $VERSION --log-level=info
          npx sentry-cli releases set-commits --auto $VERSION --log-level=info
          npx sentry-cli releases finalize $VERSION --log-level=info
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: leofalco

      - uses: akhileshns/heroku-deploy@v3.7.8
        if: github.ref == 'refs/heads/master'
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: gql-leo
          heroku_email: 'leonardo.falco@outlook.com'

